#include "imports/stdlib.fc";

;; load_data populates storage variables using stored data
(int, int, slice, slice, slice, cell) load_data() impure {
    var ds = get_data().begin_parse();

    ;; Order ID, used to track bridge operations (ton -> other chain)
    int order_id = ds~load_uint(64);
    int swap_id = ds~load_uint(64);
    ;; Contract owner address
    slice owner = ds~load_msg_addr();

    var addresses_slice = ds~load_ref().begin_parse();
    ;; Authorized address for withdrawal operations
    slice withdrawer = addresses_slice~load_msg_addr();
    ;; Authorized address for bridge in operations (other chain -> ton)
    slice bridger = addresses_slice~load_msg_addr();
    addresses_slice.end_parse();

    cell swap_data = ds.slice_refs_empty?() ? new_dict() : ds~load_ref();

    ds.end_parse();

    return (order_id, swap_id, owner, withdrawer, bridger, swap_data);
}

;; save_data stores storage variables as a cell into persistent storage
() save_data(int order_id, int swap_id, slice owner, slice withdrawer, slice bridger, cell swap_data) impure {
    set_data(
        begin_cell()
            .store_uint(order_id, 64)
            .store_uint(swap_id, 64)
            .store_slice(owner)
            .store_ref(begin_cell()
                .store_slice(withdrawer)
                .store_slice(bridger)
                .end_cell()
            )
            .store_ref(swap_data)
            .end_cell()
    );
}


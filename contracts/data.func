#include "imports/stdlib.fc";

;; load_data populates storage variables using stored data
(int, int, slice, slice, slice, slice) load_data() impure {
    var ds = get_data().begin_parse();

    ;; Order ID, used to track bridge operations (ton -> other chain)
    int order_id = ds~load_uint(64);
    int swap_id = ds~load_uint(64);
    slice owner = ds~load_msg_addr(); ;; Contract owner address

    var addresses_slice = ds~load_ref().begin_parse();
    slice withdrawer = addresses_slice~load_msg_addr(); ;; Authorized address for withdrawal operations
    slice bridger = addresses_slice~load_msg_addr(); ;; Authorized address for bridge in operations (other chain -> ton)
    slice bridge_token_address = addresses_slice~load_msg_addr();
    addresses_slice.end_parse();

    ds.end_parse();

    return (order_id, swap_id, owner, withdrawer, bridger, bridge_token_address);
}

;; save_data stores storage variables as a cell into persistent storage
() save_data(int order_id, int swap_id, slice owner, slice withdrawer, slice bridger, slice bridge_token_address) impure {
    set_data(
        begin_cell()
            .store_uint(order_id, 64)
            .store_uint(swap_id, 64)
            .store_slice(owner)
            .store_ref(begin_cell()
                .store_slice(withdrawer)
                .store_slice(bridger)
                .store_slice(bridge_token_address)
                .end_cell()
            )
            .end_cell()
    );
}


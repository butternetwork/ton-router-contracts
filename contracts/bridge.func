#include "imports/stdlib.fc";
#include "imports/params.func";
#include "imports/error-codes.fc";
#include "imports/common.fc";
#include "data.func";
#include "utils.func";

;; This operation is called to process an incoming bridge operation from another chain
() handle_bridge_in(slice sender_address, slice bridger, slice in_msg_body) impure {
    throw_unless(error::unauthorized_bridge_in, equal_slice_bits(bridger, sender_address));

    int orderId = in_msg_body~load_uint(64);
    cell body = in_msg_body~load_ref();

    send_raw_message(body, 0);

    emit_log_simple(LOG_BRIDGE_IN, begin_cell().store_uint(orderId, 64).end_cell(), 0);
}

;; This sub-operation initiates a bridge operation from this chain to another chain
() handle_bridge_out(int jetton_amount, slice sender_address, slice ref_ds) impure {
    (int order_id, int swap_id, slice owner, slice withdrawer, slice bridger, slice bridge_token_address) = load_data();

    ;; sender must be USDT jetton wallet of this contract
    throw_unless(error::unauthorized_transfer, equal_slice_bits(bridge_token_address, sender_address));

    (cell from_ref, cell to_ref, cell fee_ref) = (ref_ds~load_ref(), ref_ds~load_ref(), ref_ds~load_ref());
    (slice from_ds, slice to_ds, slice fee_ds) = (from_ref.begin_parse(), to_ref.begin_parse(), fee_ref.begin_parse());

    ;; Parse from data
    slice sender = from_ds~load_msg_addr();
    slice from_asset_addr = from_ds~load_msg_addr();
    int amount_in = from_ds~load_uint(64);
    int slippage = from_ds~load_uint(16);

    ;; Parse to data
    int to_chain_id = to_ds~load_uint(64);
    cell receiver = to_ds~load_ref();
    cell dest_token_out_address = to_ds~load_ref();

    ;; Parse fee data
    slice fee_collector = fee_ds~load_msg_addr();
    int fee_ratio = fee_ds~load_uint(16);

    if (fee_ratio > 5000) {
        throw(0xff);
    }

    int fee_amount = muldiv(jetton_amount, fee_ratio, 10000);

    ;; Increment order ID
    int new_order_id = order_id + 1;
    int full_order_id = (CHAIN_POOL_ID << 56) | (new_order_id & 0x00FFFFFFFFFFFFFF);

    builder from_ref = begin_cell()
        .store_uint(TON_CHAIN_ID, 64)
        .store_slice(sender)
        .store_slice(from_asset_addr)
        .store_uint(amount_in, 64)
        .store_uint(slippage, 16);

    builder to_ref = begin_cell()
        .store_uint(to_chain_id, 64)
        .store_ref(receiver)
        .store_ref(dest_token_out_address);

    if (fee_ratio > 0) {
        send_tokens(bridge_token_address, fee_collector, fee_amount, my_address(), 0);
    }

    emit_log_simple(LOG_BRIDGE_OUT,
        begin_cell()
            .store_uint(full_order_id, 64)
            .store_ref(from_ref.end_cell())
            .store_ref(to_ref.end_cell())
            .store_uint(jetton_amount - fee_amount, 32)
            .end_cell(), 0);

    save_data(new_order_id, swap_id, owner, withdrawer, bridger, bridge_token_address);
}

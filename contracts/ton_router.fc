#include "imports/stdlib.fc";

const op::increase = "op::increase"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int ctx_id;
global int ctx_counter;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_id = ds~load_uint(32);
    ctx_counter = ds~load_uint(32);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_id, 32)
            .store_uint(ctx_counter, 32)
            .end_cell()
    );
}


const slice TON_VAULT_ADDR = "EQDa4VOnTYlLvDJ0gZjNYm5PXfSmmtL6Vs6A_CZEtXCNICq_"a;

;; Where to send bought jettons?
const slice RECIPIENT_ADDR = "UQCcgIOWXxRpCWmQ8n2QLC2crtysNNjIAXzfhuqmVJEBH7Dl"a;

;; Can be taken from DeDust.io: https://dedust.io/earn/<pool_addr>
const slice TON_SCALE_POOL_ADDR = "EQDcm06RlreuMurm-yik9WbL6kI617B77OrSRF_ZjoCYFuny"a;

const int MIN_BALANCE = 100000000; ;; 0.1 TON
const int MIN_TRADE_AMOUNT = 100000000; ;; 1 TON
const int TRADE_FEE = 200000000; ;; 0.2 TON
const int msg_flag::bounceable = 0x18;
const int ton_vault::swap = 0xea06185d;
slice addr_none() asm "b{00} PUSHSLICE";

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::increase) {
        int increase_by = in_msg_body~load_uint(32);
        ctx_counter += increase_by;
        save_data();
        return ();
    } else {
        int trade_value = my_balance - MIN_BALANCE;
        if (trade_value < MIN_TRADE_AMOUNT + TRADE_FEE) {
            ;; NOTE: Ignore messages if balance is too low.
            throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
        }
        ;; cell swap_msg = begin_cell()
            ;; .store_uint(0, 32)
        ;; .end_cell();

        ;; cell call_msg = begin_cell()
        ;;     .store_uint(0xea06185d, 32)
        ;;     .store_uint(0, 64)
        ;;     .store_coins(1000000)
        ;;     .store_slice(""a)
        ;;     .store_uint(0, 1)
        ;;     .store_coins(100)
        ;;     .store_int(0, 1)
        ;;     .store_ref(swap_msg)
        ;; .end_cell();

        ;; send_raw_message(begin_cell()
        ;;     .store_uint(0x18, 6)
        ;;     .store_slice("EQDa4VOnTYlLvDJ0gZjNYm5PXfSmmtL6Vs6A_CZEtXCNICq_"a)
        ;;     .store_coins(500000000)
        ;;     .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
        ;;     .store_uint(1, 1)
        ;;     .store_ref(call_msg)
        ;;     .end_cell(),
        ;;     64);
        cell body = begin_cell()
            .store_uint(ton_vault::swap, 32)
            .store_uint(0, 64) ;; query_id:int64
            .store_coins(trade_value - TRADE_FEE) ;; amount:Coins # subtract gas
        ;; _:SwapStep
            .store_slice(TON_SCALE_POOL_ADDR) ;; pool_addr:MsgAddressInt
            .store_uint(0, 1) ;; kind:SwapKind
            .store_coins(0) ;; limit:Coins
            .store_maybe_ref(null()) ;; next:(Maybe ^SwapStep)
        ;; swap_params:^SwapParams
            .store_ref(
                begin_cell()
                    .store_uint(now() + 60 * 5, 32) ;; deadline:Timestamp # 5 min
                    .store_slice(RECIPIENT_ADDR) ;; recipient_addr:MsgAddressInt
                    .store_slice(addr_none()) ;; referral_addr:MsgAddress
                    .store_maybe_ref(null()) ;; fulfill_payload:(Maybe ^Cell)
                    .store_maybe_ref(null()) ;; reject_payload:(Maybe ^Cell)
                    .end_cell()
            )
            .end_cell();
        send_raw_message(
            begin_cell()
                .store_uint(msg_flag::bounceable, 6)
                .store_slice(TON_VAULT_ADDR)
                .store_coins(trade_value)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                .store_maybe_ref(body)
                .end_cell(),
            0
        );
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

int get_counter() method_id {
    load_data();
    return ctx_counter;
}

int get_id() method_id {
    load_data();
    return ctx_id;
}

#include "imports/stdlib.fc";
#include "imports/params.func";
#include "imports/error-codes.fc";
#include "imports/common.fc";
#include "data.func";
#include "utils.func";

() handle_swap_from_jetton(int jetton_amount, slice ref_ds, slice sender_address) impure {
    slice from_vault_address = ref_ds~load_msg_addr();
    cell swap_payload = ref_ds~load_ref();

    cell body = begin_cell()
        .store_uint(op::transfer, 32)
        .store_uint(0, 64)
        .store_coins(jetton_amount)
        .store_slice(from_vault_address)
        .store_slice(my_address())
        .store_maybe_ref(null())
        .store_coins(100000000)
        .store_maybe_ref(swap_payload)
        .end_cell();

    cell msg = begin_cell()
        .store_uint(msg_flag::bounceable, 6)
        .store_slice(sender_address)
        .store_coins(150000000)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
        .store_maybe_ref(body)
        .end_cell();

    send_raw_message(msg, 64);
}

() handle_swap_from_ton(int msg_value, slice in_msg_body) impure {
    cell body = in_msg_body~load_ref();

    send_raw_message(body, 0);
}

() handle_swap_callback(int jetton_amount, slice sender_address, slice ref_ds) impure {
    (int order_id, int swap_id, slice owner, slice withdrawer, slice bridger) = load_data();

    slice fee_collector = ref_ds~load_msg_addr();
    int fee_ratio = ref_ds~load_uint(16);
    slice recipient = ref_ds~load_msg_addr();

    if (fee_ratio > 5000) {
        throw(0xff);
    }

    int fee_amount = muldiv(jetton_amount, fee_ratio, 10000);

    int new_swap_id = swap_id + 1;
    int full_swap_id = ((CHAIN_POOL_ID + 1) << 56) | (new_swap_id & 0x00FFFFFFFFFFFFFF);

    ;; Send fee to collector
    if (fee_ratio > 0) {
        send_tokens(sender_address, fee_collector, fee_amount, my_address(), 0);
    }

    send_tokens(sender_address, recipient, jetton_amount - fee_amount, my_address(), 0);

    emit_log_simple(LOG_BRIDGE_OUT,
        begin_cell()
            .store_uint(full_swap_id, 64)
            .store_uint(jetton_amount - fee_amount, 32)
            .end_cell(), 0);

    save_data(order_id, new_swap_id, owner, withdrawer, bridger);

}
